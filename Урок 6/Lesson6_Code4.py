import sys

print(sys.version, sys.platform)

a = 5
b = 125.54
c = 'Hello World!'

print(sys.getsizeof(a))
print(sys.getsizeof(b))
print(sys.getsizeof(c))

lst = [i for i in range(10)]
print(sys.getsizeof(lst))

def show_size(x, level=0):
    print('\t' * level, f'type = {x.__class__}, size = {sys.getsizeof(x)}, object = {x}')

    if hasattr(x, '__iter__'): # т.е. объект итерируемый например список, то будем выводить информацию об отдельных объектах списка
        # но например у нас есть словарь, который тоже итерируемый, но у словаря есть и ключ и значение поэтому добавим ещё одну проверку
        if hasattr(x, 'items'): # вторая проверка говорит нам о том, что переданыый объект является словарём
            for xx in x.items():
                show_size(xx, level+1)
        # со словарями разобрались, но заметим, что строка тоже итерируемый объект, при этом даже если в строке будет один символ,
        # то будем итерироваться по этому одному объекту и получим ошибку переполнения стека вызова функции
        elif not isinstance(x, str): # если объект итерируемый, но это не строка, то будем передавать каждый элемент каждого объекта
            for xx in x:
                show_size(xx, level+1)

show_size(a)
show_size(b)
show_size(c)
show_size(lst)


print('*' * 50)

t = tuple(lst)
show_size(t)

print('*' * 50)
# хеш таблица. Часть таблицы является пустой
# поиск элемента внутри множества осуществляется за константное время
# со списком и кортежем ситуация противоположная
s = set(lst)
show_size(s)

print('*' * 50)
d = {str(i): i for i in range(10)}
show_size(d)

# внутри словара кортежи. Кортеж ключ значение. размером 56 в моём случае. Словарь занял примерно половину размера множества. строка в один символ 50 байт и инт 24 байта

print('*' * 50)

_variables = []
show_size(_variables)

print('*' * 50)

# count = [49, 33, 24, 19, 16, 14, 12, 11]
answ=[0, 0, 0, 0, 0, 0, 0]
# answ = [[6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6]]
print('*' * 50)
# answ1 = [[6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6]]
show_size(answ)
print('*' * 50)

# print('*' * 50)
#
# di = {2: 49, 3: 33, 4: 24, 5: 19, 6: 16, 7: 14, 8: 12, 9: 11}
# show_size(di)